'use client';

import React, { useState } from 'react';
import { 
  ChevronRight, ChevronDown, ChevronUp, Plus, Trash2, Edit, Clock, User, 
  AlertCircle, CheckCircle, PlayCircle, PauseCircle, FileText, 
  Link2, Upload, DollarSign, TrendingUp, Package, Layers, GitBranch,
  Timer, Save, RefreshCw, X, Paperclip, Building, Bell, Check, ArrowRight, Database,
  Calendar, AlertTriangle, ArrowLeft, ShoppingCart, Lightbulb, Megaphone
} from 'lucide-react';
import LottieIcon from './LottieIcon';

// Tipos
type Status = 'planejada' | 'proxima' | 'executando' | 'pausada' | 'atrasada' | 'concluida';

// Componente de Badge de Status
const StatusBadge: React.FC<{ status: Status }> = ({ status }) => {
  const statusConfig = {
    planejada: { color: 'bg-gray-500', label: 'Planejada', textColor: 'text-gray-100' },
    proxima: { color: 'bg-orange-500', label: 'Próxima', textColor: 'text-orange-100' },
    executando: { color: 'bg-blue-500', label: 'Executando', textColor: 'text-blue-100' },
    atrasada: { color: 'bg-red-500', label: 'Atrasada', textColor: 'text-red-100' },
    pausada: { color: 'bg-yellow-500', label: 'Pausada', textColor: 'text-yellow-100' },
    concluida: { color: 'bg-green-500', label: 'Concluída', textColor: 'text-green-100' }
  };

  const config = statusConfig[status] || statusConfig.planejada;

  return (
    <span className={`px-2 py-1 rounded-full text-xs font-bold ${config.color} ${config.textColor}`}>
      {config.label}
    </span>
  );
};

interface Tarefa {
  id: string;
  nome: string;
  status: Status;
  ordem?: number;
  setor: string;
  responsavel_usuario?: string | null;
  responsavel_nome?: string | null;
  responsavel_tipo?: string;
  prazo_horas: number;
  duracao_segundos?: number;
  mandrill_coins: number;
  instrucao?: string;
  templates?: any[];
  data_inicio?: string;
  data_fim?: string;
  tempo_execucao?: number;
  resultado?: any;
}

interface Servico {
  id: string;
  nome: string;
  status: Status;
  progresso_percentual: number;
  tarefas?: Tarefa[];
}

interface Entrega {
  id: string;
  nome: string;
  status: Status;
  progresso_percentual: number;
  briefing: string;
  texto_apoio?: string;
  valor_unitario?: number;
  quantidade_total?: number;
  indice_atual?: number;
  item_crm?: {
    icone?: string;
    titulo?: string;
    nome?: string;
    descricao?: string;
    tipo?: string;
    categoria?: string;
  };
  servicos?: Servico[];
}

interface DeliveryDetailProps {
  delivery: Entrega;
  projectId: string;
  router: any;
  editingServiceId: string | null;
  onStartEditing: (serviceId: string) => void;
  onStopEditing: () => void;
  onViewTask?: (task: Tarefa) => void;
  onCompleteTask?: (task: Tarefa) => void;
  onBackToProject: () => void;
}

export default function DeliveryDetail({
  delivery,
  projectId,
  router,
  editingServiceId,
  onStartEditing,
  onStopEditing,
  onViewTask,
  onCompleteTask,
  onBackToProject
}: DeliveryDetailProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [editedTitle, setEditedTitle] = useState(delivery.nome);
  const [editedDeadline, setEditedDeadline] = useState('');
  const [editedBudget, setEditedBudget] = useState(delivery.valor_unitario || 0);
  const [showActionsMenu, setShowActionsMenu] = useState(false);

  // Função para calcular status do deadline
  const getDeadlineStatus = () => {
    if (!editedDeadline) return null;
    
    const today = new Date();
    const deadline = new Date(editedDeadline);
    const diffDays = Math.ceil((deadline.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) {
      return { type: 'overdue', message: `${Math.abs(diffDays)} dias em atraso`, color: 'text-red-500' };
    } else if (diffDays <= 3) {
      return { type: 'near', message: `${diffDays} dias restantes`, color: 'text-yellow-500' };
    } else {
      return { type: 'ok', message: `${diffDays} dias restantes`, color: 'text-green-500' };
    }
  };

  // Configuração do status
  const statusConfig = {
    planejada: { color: 'bg-gray-500', label: 'Planejada', textColor: 'text-gray-700' },
    proxima: { color: 'bg-orange-500', label: 'Próxima', textColor: 'text-orange-700' },
    executando: { color: 'bg-blue-500', label: 'Executando', textColor: 'text-blue-700' },
    atrasada: { color: 'bg-red-500', label: 'Atrasada', textColor: 'text-red-700' },
    pausada: { color: 'bg-yellow-500', label: 'Pausada', textColor: 'text-yellow-700' },
    concluida: { color: 'bg-green-500', label: 'Concluída', textColor: 'text-green-700' }
  };

  const statusInfo = statusConfig[delivery.status] || statusConfig.planejada;
  const deadlineStatus = getDeadlineStatus();

  // Função para salvar alterações
  const handleSave = () => {
    console.log('Salvando entrega:', {
      id: delivery.id,
      nome: editedTitle,
      deadline: editedDeadline,
      valor_unitario: editedBudget
    });
    setIsEditing(false);
  };

  // Função para cancelar alterações
  const handleCancel = () => {
    setEditedTitle(delivery.nome);
    setEditedDeadline('');
    setEditedBudget(delivery.valor_unitario || 0);
    setIsEditing(false);
  };

  return (
    <div className="min-h-full p-6">
      <div className="bg-gradient-to-br from-gray-900 to-gray-850 rounded-xl border border-gray-700 shadow-xl mb-6">
        <div
          className="p-4 cursor-pointer hover:bg-gray-800/50 transition-colors rounded-t-xl"
          onClick={onBackToProject}
        >
          {/* Cabeçalho Principal */}
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-start gap-3 flex-1">
              <ArrowLeft className="w-5 h-5 text-gray-400 mt-1" />
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-2">
                  {/* Título da Entrega */}
                  <h2 className="text-xl font-bold text-white">
                    {delivery.nome}
                  </h2>
                  <StatusBadge status={delivery.status} />
                </div>
                <p className="text-sm text-gray-400">
                  Detalhes da Entrega
                </p>
              </div>
            </div>
          </div>
        </div>

        <div className="p-4 border-t border-gray-700">
          <div className="bg-gray-900 rounded-lg border border-gray-700 mb-3 hover:border-gray-600 transition-colors">
            <div className="p-4">
          <div className="flex items-start justify-between">
            {/* Lado Esquerdo: Ícone + Informações Principais */}
            <div className="flex items-start gap-4 flex-1">
              {/* Ícone da entrega */}
              <div className="w-12 h-12 flex items-center justify-center bg-gray-800 rounded-lg">
                <LottieIcon 
                  tipo={delivery.item_crm?.tipo}
                  className="text-green-500" 
                  size={24} 
                />
              </div>

              {/* Informações da entrega */}
              <div className="flex-1 space-y-3">
                {/* Linha 1: Título editável */}
                {isEditing ? (
                  <div className="flex items-center gap-2">
                    <input
                      type="text"
                      value={editedTitle}
                      onChange={(e) => setEditedTitle(e.target.value)}
                      className="flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded text-white focus:border-blue-500 focus:outline-none"
                      autoFocus
                    />
                    <button
                      onClick={handleSave}
                      className="px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-sm transition-colors"
                    >
                      <Save className="w-4 h-4" />
                    </button>
                    <button
                      onClick={handleCancel}
                      className="px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded text-sm transition-colors"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <h3 className="text-lg font-bold text-white">{delivery.nome}</h3>
                    <span className={`px-2 py-1 rounded-full text-xs font-bold ${statusInfo.color} text-white`}>
                      {statusInfo.label}
                    </span>
                  </div>
                )}

                {/* Linha 2: Informações principais */}
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <span className="text-xs text-gray-400">Briefing</span>
                    <p className="text-sm text-white font-medium">
                      {delivery.briefing || 'Briefing não definido'}
                    </p>
                  </div>
                  <div>
                    <span className="text-xs text-gray-400">Valor Unitário</span>
                    <p className="text-sm text-white font-medium">
                      R$ {(delivery.valor_unitario || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                    </p>
                  </div>
                </div>

                {/* Linha 3: Progresso */}
                <div>
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-xs text-gray-400">Progresso</span>
                    <span className="text-xs font-bold text-green-400">
                      {delivery.progresso_percentual.toFixed(0)}%
                    </span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div
                      className="bg-green-500 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${delivery.progresso_percentual}%` }}
                    />
                  </div>
                </div>

                {/* Deadline se definido */}
                {deadlineStatus && (
                  <div className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-gray-400" />
                    <span className={`text-sm font-medium ${deadlineStatus.color}`}>
                      {deadlineStatus.message}
                    </span>
                  </div>
                )}

                {/* Progresso detalhado */}
                <div className="bg-gray-800 p-3 rounded-lg">
                  <div className="text-xs text-gray-400 mb-2">Progresso Detalhado</div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-300">
                      {((delivery.progresso_percentual / 100) * 100).toFixed(1)}%
                    </span>
                    <div className="w-32 h-1 bg-gray-700 rounded-full overflow-hidden">
                      <div
                        className="bg-green-500 h-1 rounded-full transition-all duration-300"
                        style={{ width: `${delivery.progresso_percentual}%` }}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Menu de ações */}
            {!isEditing && (
              <div className="relative">
                <button
                  onClick={() => setShowActionsMenu(!showActionsMenu)}
                  className="p-2 hover:bg-gray-700 rounded transition-colors text-gray-400 hover:text-white"
                >
                  <Edit className="w-4 h-4" />
                </button>
                
                {showActionsMenu && (
                  <div className="absolute right-0 top-full mt-1 bg-gray-800 border border-gray-700 rounded-lg shadow-lg z-10 min-w-[140px]">
                    <button
                      onClick={() => {
                        setIsEditing(true);
                        setShowActionsMenu(false);
                      }}
                      className="flex items-center gap-2 w-full px-3 py-2 text-sm text-gray-300 hover:bg-gray-700 rounded-t-lg"
                    >
                      <Edit className="w-3 h-3" />
                      Editar
                    </button>
                    
                    <button
                      onClick={() => {
                        setEditedDeadline(new Date().toISOString().split('T')[0]);
                        setShowActionsMenu(false);
                      }}
                      className="flex items-center gap-2 w-full px-3 py-2 text-sm text-gray-300 hover:bg-gray-700"
                    >
                      <Calendar className="w-3 h-3" />
                      Definir Prazo
                    </button>
                    
                    <button
                      onClick={() => {
                        console.log('Duplicar entrega:', delivery.id);
                        setShowActionsMenu(false);
                      }}
                      className="flex items-center gap-2 w-full px-3 py-2 text-sm text-gray-300 hover:bg-gray-700"
                    >
                      <Plus className="w-3 h-3" />
                      Duplicar
                    </button>
                    
                    <button
                      onClick={() => {
                        if (confirm('Tem certeza que deseja excluir esta entrega?')) {
                          console.log('Excluir entrega:', delivery.id);
                        }
                        setShowActionsMenu(false);
                      }}
                      className="flex items-center gap-2 w-full px-3 py-2 text-sm text-red-400 hover:bg-red-900/20 rounded-b-lg"
                    >
                      <Trash2 className="w-3 h-3" />
                      Excluir
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Lista de Serviços quando isDetailView = true */}
        <div className="mt-4 p-4">
          <h4 className="text-sm font-semibold text-gray-400 uppercase tracking-wider mb-3">
            Serviços ({delivery.servicos?.length || 0})
          </h4>
          <div className="space-y-2">
            {delivery.servicos?.map(servico => (
              <div key={servico.id} className="bg-gray-800 rounded-lg p-3 border border-gray-700">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Building className="w-4 h-4 text-green-400" />
                    <span className="text-sm font-medium text-white">{servico.nome}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-xs text-gray-400">
                      {servico.tarefas?.filter(t => t.status === 'concluida').length || 0}/{servico.tarefas?.length || 0} tarefas
                    </span>
                    <div className="w-16 h-1 bg-gray-700 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-green-500 transition-all duration-300"
                        style={{ width: `${servico.progresso_percentual || 0}%` }}
                      />
                    </div>
                    <span className="text-xs font-bold text-green-400">
                      {(servico.progresso_percentual || 0).toFixed(0)}%
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}